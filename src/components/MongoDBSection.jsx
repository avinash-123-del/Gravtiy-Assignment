import React, { useState } from 'react';

const MongoDBSection = () => {
  const [showAnswer, setShowAnswer] = useState(false);

  const sampleData = [
    {
      "_id": "ObjectId('...')",
      "date": "2024-06-15T00:00:00Z",
      "store": "Store A",
      "items": [
        { "name": "item1", "quantity": 5, "price": 10.0 },
        { "name": "item2", "quantity": 3, "price": 20.0 }
      ]
    },
    {
      "_id": "ObjectId('...')",
      "date": "2024-06-20T00:00:00Z",
      "store": "Store A",
      "items": [
        { "name": "item3", "quantity": 2, "price": 15.0 }
      ]
    },
    {
      "_id": "ObjectId('...')",
      "date": "2024-06-15T00:00:00Z",
      "store": "Store B",
      "items": [
        { "name": "item1", "quantity": 4, "price": 12.0 },
        { "name": "item4", "quantity": 1, "price": 25.0 }
      ]
    }
  ];

  const expectedOutput = [
    {
      "store": "Store A",
      "month": "2024-06",
      "totalRevenue": 230.0,
      "averagePrice": 15.0
    },
    {
      "store": "Store B",
      "month": "2024-06",
      "totalRevenue": 73.0,
      "averagePrice": 18.5
    }
  ];

  const aggregationPipeline = `[
  {
    $unwind: "$items"
  },
  {
    $addFields: {
      month: {
        $dateToString: {
          format: "%Y-%m",
          date: "$date"
        }
      },
      itemRevenue: {
        $multiply: ["$items.quantity", "$items.price"]
      }
    }
  },
  {
    $group: {
      _id: {
        store: "$store",
        month: "$month"
      },
      totalRevenue: { $sum: "$itemRevenue" },
      averagePrice: { $avg: "$items.price" },
      itemCount: { $sum: 1 }
    }
  },
  {
    $project: {
      _id: 0,
      store: "$_id.store",
      month: "$_id.month",
      totalRevenue: { $round: ["$totalRevenue", 2] },
      averagePrice: { $round: ["$averagePrice", 2] }
    }
  },
  {
    $sort: {
      store: 1,
      month: 1
    }
  }
]`;

  return (
    <div className="max-w-6xl mx-auto">
      <div className="bg-white rounded-lg border p-6">
        {/* Question Header */}
        <h2 className="text-xl font-bold text-gray-800 mb-4">
          Question 3: MongoDB Aggregation
        </h2>
        
        {/* Problem Description */}
        <div className="bg-gray-50 border rounded-lg p-4 mb-6">
          <p className="text-gray-700 mb-3">
            Consider a MongoDB collection named <code className="bg-gray-200 px-2 py-1 rounded">sales</code> with the following document structure:
          </p>
          <p className="text-gray-600 mb-3">
            Your task is to write an aggregation pipeline to calculate the total revenue generated by each store for each month, along with the average price of items sold. The result should be sorted first by store and then by month (in ascending order).
          </p>
        </div>

        {/* Sample Data Table */}
        <div className="mb-6">
          <h3 className="text-lg font-semibold text-gray-700 mb-3">Sample Data:</h3>
          <div className="overflow-x-auto">
            <table className="min-w-full border border-gray-300">
              <thead className="bg-gray-100">
                <tr>
                  <th className="border border-gray-300 px-4 py-2 text-left">_id</th>
                  <th className="border border-gray-300 px-4 py-2 text-left">Date</th>
                  <th className="border border-gray-300 px-4 py-2 text-left">Store</th>
                  <th className="border border-gray-300 px-4 py-2 text-left">Items</th>
                </tr>
              </thead>
              <tbody>
                {sampleData.map((doc, index) => (
                  <tr key={index} className="hover:bg-gray-50">
                    <td className="border border-gray-300 px-4 py-2 text-sm">{doc._id}</td>
                    <td className="border border-gray-300 px-4 py-2 text-sm">{doc.date}</td>
                    <td className="border border-gray-300 px-4 py-2 text-sm font-medium">{doc.store}</td>
                    <td className="border border-gray-300 px-4 py-2 text-sm">
                      {doc.items.map((item, i) => (
                        <div key={i} className="mb-1">
                          {item.name}: qty={item.quantity}, price=${item.price}
                        </div>
                      ))}
                    </td>
                  </tr>
                ))}
              </tbody>
            </table>
          </div>
        </div>

        {/* Expected Output */}
        <div className="mb-6">
          <h3 className="text-lg font-semibold text-gray-700 mb-3">Expected Output:</h3>
          <div className="overflow-x-auto">
            <table className="min-w-full border border-gray-300">
              <thead className="bg-gray-100">
                <tr>
                  <th className="border border-gray-300 px-4 py-2 text-left">Store</th>
                  <th className="border border-gray-300 px-4 py-2 text-left">Month</th>
                  <th className="border border-gray-300 px-4 py-2 text-left">Total Revenue</th>
                  <th className="border border-gray-300 px-4 py-2 text-left">Average Price</th>
                </tr>
              </thead>
              <tbody>
                {expectedOutput.map((result, index) => (
                  <tr key={index} className="hover:bg-gray-50">
                    <td className="border border-gray-300 px-4 py-2 font-medium">{result.store}</td>
                    <td className="border border-gray-300 px-4 py-2">{result.month}</td>
                    <td className="border border-gray-300 px-4 py-2 text-green-600 font-semibold">
                      ${result.totalRevenue}
                    </td>
                    <td className="border border-gray-300 px-4 py-2 text-blue-600 font-semibold">
                      ${result.averagePrice}
                    </td>
                  </tr>
                ))}
              </tbody>
            </table>
          </div>
        </div>

        {/* Get Answer Button */}
        <div className="mb-6">
          <button
            onClick={() => setShowAnswer(!showAnswer)}
            className="bg-blue-500 text-white px-6 py-2 rounded-lg hover:bg-blue-600"
          >
            {showAnswer ? 'Hide Answer' : 'Get Answer'}
          </button>
        </div>

        {/* Answer Section */}
        {showAnswer && (
          <div className="mb-6">
            <h3 className="text-lg font-semibold text-gray-700 mb-3">MongoDB Aggregation Pipeline:</h3>
            <div className="bg-gray-900 text-gray-300 rounded-lg p-4 font-mono text-sm whitespace-pre-line overflow-x-auto">
              {aggregationPipeline}
            </div>
            
            <div className="mt-4 p-4 bg-blue-50 border-l-4 border-blue-500">
              <h4 className="font-semibold text-blue-800 mb-2">Explanation:</h4>
              <ul className="text-blue-700 text-sm space-y-1">
                <li>1. <code>$unwind</code> - Deconstructs the items array</li>
                <li>2. <code>$addFields</code> - Adds month and itemRevenue calculated fields</li>
                <li>3. <code>$group</code> - Groups by store and month, calculates totals</li>
                <li>4. <code>$project</code> - Formats the output structure</li>
                <li>5. <code>$sort</code> - Sorts by store and month</li>
              </ul>
            </div>
          </div>
        )}
      </div>
    </div>
  );
};

export default MongoDBSection;